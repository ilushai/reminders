import sys
import traceback
import re
import datetime
import pytz
import json
import os
import asyncio
from collections import defaultdict

from aiogram import Bot, Dispatcher, types, executor
from my_config import TELEGRAM_BOT_TOKEN
from services.speech_to_text import speech_to_text
from services.reminder_parser import parse_reminder
from services.db_service import (
    add_reminder,
    init_db,
    get_all_reminders_for_user,
    get_due_reminders,
    mark_reminder_sent
)

ADMIN_ID = 570278582  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

months = [
    "—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
    "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"
]

ISO_REGEX = re.compile(r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?")

def is_valid_iso(dt_str):
    return bool(dt_str and ISO_REGEX.match(dt_str))

def log(msg):
    print(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {msg}")

def dt_to_str(dt):
    return f"{dt.day} {months[dt.month - 1]} –≤ {dt:%H:%M}"

def pretty_reminder(parsed):
    event_dt = datetime.datetime.fromisoformat(parsed['remind_at'])
    remind_before = parsed.get('remind_before', 0) or 0
    remind_dt = event_dt - datetime.timedelta(minutes=remind_before)
    event_str = dt_to_str(event_dt)
    remind_str = dt_to_str(remind_dt)

    if remind_before >= 60:
        hours = remind_before // 60
        minutes = remind_before % 60
        before_str = f"{hours} —á." + (f" {minutes} –º–∏–Ω." if minutes else "")
    elif remind_before > 0:
        before_str = f"{remind_before} –º–∏–Ω."
    else:
        before_str = "–±–µ–∑ –¥–æ–ø. –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"

    text = parsed['text']
    EMOJI_TEXT = "üí¨"
    if any(word in text.lower() for word in ["—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "—Å–ø–æ—Ä—Ç", "—Ñ—É—Ç–±–æ–ª", "–±–∞—Å–∫–µ—Ç–±–æ–ª"]):
        EMOJI_TEXT = "üèÄ"
    elif any(word in text.lower() for word in ["–ø–æ–µ—Å—Ç—å", "–∫—É—à–∞—Ç—å", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥"]):
        EMOJI_TEXT = "üçΩÔ∏è"
    elif any(word in text.lower() for word in ["—Ä–∞–∑–º—è—Ç—å—Å—è", "—Ä–∞–∑–º–∏–Ω–∫–∞"]):
        EMOJI_TEXT = "ü§∏‚Äç‚ôÇÔ∏è"

    EMOJI_TIME = "üïí"
    EMOJI_ARROW = "‚û°Ô∏è"

    return (
        f"{EMOJI_TIME} <b>{event_str}</b>\n"
        f"{EMOJI_TEXT} <b>{text}</b>\n"
        f"–ù–∞–ø–æ–º–Ω–∏—Ç—å: <b>{remind_str}</b> {EMOJI_ARROW} <i>({before_str} –¥–æ —Å–æ–±—ã—Ç–∏—è)</i>"
    )

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    log(f"/start –æ—Ç {message.from_user.id}")
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
        "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    )

@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    log(f"/list –æ—Ç {message.from_user.id}")
    reminders = get_all_reminders_for_user(message.from_user.id)
    if not reminders:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    now_dt = datetime.datetime.now(pytz.timezone("Europe/Moscow"))
    now = now_dt.date()
    tomorrow = now + datetime.timedelta(days=1)

    future = []
    past = []

    for reminder_id, remind_at, text, remind_before, status in reminders:
        if not is_valid_iso(remind_at):
            log(f"‚õîÔ∏è –ë–∏—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} (remind_at={remind_at}), –ø—Ä–æ–ø—É—Å–∫–∞—é")
            continue
        event_dt = datetime.datetime.fromisoformat(remind_at)
        if status == "active" and event_dt.date() >= now:
            future.append((event_dt, text, remind_before))
        else:
            past.append((event_dt, text, remind_before))

    calendar = defaultdict(list)
    for event_dt, text, remind_before in future:
        day = event_dt.date()
        if day == now:
            key = f"–°–µ–≥–æ–¥–Ω—è ({day.strftime('%d %b')})"
        elif day == tomorrow:
            key = f"–ó–∞–≤—Ç—Ä–∞ ({day.strftime('%d %b')})"
        else:
            weekday = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][day.weekday()]
            key = f"{day.strftime('%d %b')} ({weekday})"
        calendar[key].append((event_dt, text, remind_before))

    def date_from_key(key):
        if "–°–µ–≥–æ–¥–Ω—è" in key:
            return now
        if "–ó–∞–≤—Ç—Ä–∞" in key:
            return tomorrow
        match = re.search(r'(\d{2}) (\w{3})', key)
        if match:
            d, m = match.groups()
            m_dict = {
                '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
                '–∏—é–ª': 7, '–∞–≤–≥': 8, '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
            }
            m_num = m_dict.get(m.lower(), 1)
            return datetime.date(now.year, m_num, int(d))
        return now + datetime.timedelta(days=1000)

    msg = "üìÖ <b>–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
    if future:
        for key in sorted(calendar.keys(), key=date_from_key):
            msg += f"<b>{key}</b>\n"
            for event_dt, text, _ in sorted(calendar[key], key=lambda x: x[0]):
                time_str = event_dt.strftime('%H:%M')
                text_fmt = text.strip().capitalize()
                msg += f"<code>{time_str}</code> ‚Äî {text_fmt}\n"
            msg += "\n"
    else:
        msg += "<i>–ù–µ—Ç –±—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.</i>\n\n"

    if past:
        msg += "‚è≥ <b>–ü—Ä–æ—à–µ–¥—à–∏–µ:</b>\n"
        for event_dt, text, _ in sorted(past, key=lambda x: x[0]):
            date_str = event_dt.strftime('%d %b %H:%M')
            text_fmt = text.strip().capitalize()
            msg += f"<i>{date_str} ‚Äî {text_fmt}</i>\n"
        msg += "\n"
    else:
        msg += "<i>–ü—Ä–æ—à–µ–¥—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.</i>\n"

    await message.reply(msg, parse_mode="HTML")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    log(f"–¢–µ–∫—Å—Ç –æ—Ç {message.from_user.id}: {message.text}")
    now_iso = datetime.datetime.now(pytz.timezone("Europe/Moscow")).isoformat()
    try:
        parsed = json.loads(parse_reminder(message.text, now_iso))
        if not parsed.get("remind_at") or not is_valid_iso(parsed["remind_at"]):
            log(f"‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–ª—É—á–µ–Ω–æ: {parsed.get('remind_at')})")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å!")
            return
        add_reminder(
            user_id=message.from_user.id,
            remind_at=parsed["remind_at"],
            remind_before=parsed.get("remind_before", 0),
            text=parsed["text"]
        )
        log(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {parsed}")
        reply = pretty_reminder(parsed)
        await message.reply(reply, parse_mode="HTML")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + str(e))

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    log(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {message.from_user.id}")
    try:
        file_info = await bot.get_file(message.voice.file_id)
        file = await bot.download_file(file_info.file_path)
        audio_path = "temp_voice.ogg"
        with open(audio_path, "wb") as f:
            f.write(file.read())
        text = speech_to_text(audio_path, language="ru")
        os.remove(audio_path)
        now_iso = datetime.datetime.now(pytz.timezone("Europe/Moscow")).isoformat()
        parsed = json.loads(parse_reminder(text, now_iso))
        if not parsed.get("remind_at") or not is_valid_iso(parsed["remind_at"]):
            log(f"‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–ª—É—á–µ–Ω–æ: {parsed.get('remind_at')})")
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å —á—É—Ç—å —Ç–æ—á–Ω–µ–µ!")
            return
        add_reminder(
            user_id=message.from_user.id,
            remind_at=parsed["remind_at"],
            remind_before=parsed.get("remind_before", 0),
            text=parsed["text"]
        )
        log(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {parsed}")
        reply = pretty_reminder(parsed)
        await message.reply(f"–ì–æ–ª–æ—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: {text}\n\n{reply}", parse_mode="HTML")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: " + str(e))

async def notify_admin(msg):
    try:
        await bot.send_message(ADMIN_ID, f"[–ë–æ—Ç] {msg}", parse_mode="HTML")
    except Exception as err:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {err}")

async def check_and_send_reminders():
    while True:
        now = datetime.datetime.now(pytz.timezone("Europe/Moscow")).replace(second=0, microsecond=0)
        now_iso = now.isoformat()
        reminders = get_due_reminders(now_iso)
        log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π... –ù–∞–π–¥–µ–Ω–æ: {len(reminders)}")
        for r in reminders:
            reminder_id, user_id, remind_at, text = r
            if not is_valid_iso(remind_at):
                log(f"‚ùóÔ∏è –£ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id} –±–∏—Ç–æ–µ –ø–æ–ª–µ remind_at={remind_at}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                mark_reminder_sent(reminder_id)
                continue
            try:
                await bot.send_message(
                    user_id,
                    f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n<b>{text}</b>\nüïí <b>{dt_to_str(datetime.datetime.fromisoformat(remind_at))}</b>",
                    parse_mode="HTML"
                )
                mark_reminder_sent(reminder_id)
                log(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user {user_id} ({reminder_id})")
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
                await notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await asyncio.sleep(30)

if __name__ == "__main__":
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        init_db()
        loop = asyncio.get_event_loop()
        loop.create_task(check_and_send_reminders())
        loop.run_until_complete(notify_admin("‚úÖ –ë–æ—Ç –±—ã–ª (—Ä–µ)–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"))
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        log(f"=== –û–®–ò–ë–ö–ê –í –ó–ê–ü–£–°–ö–ï ===\n{e}")
        import asyncio
        asyncio.run(notify_admin(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—É—Å–∫–µ: {e}"))
        traceback.print_exc()
        input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
